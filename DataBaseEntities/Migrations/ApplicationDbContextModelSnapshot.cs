// <auto-generated />
using DataBaseEntities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBaseEntities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DataBaseEntities.Models.LanguagePerson", b =>
                {
                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("LanguageName", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("LanguagePerson");
                });

            modelBuilder.Entity("DataBaseEntities.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityName");

                    b.HasIndex("CountryName");

                    b.HasIndex("LanguageName");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DataBaseEntities.Models.ViewModel.City", b =>
                {
                    b.Property<string>("CityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CityName");

                    b.HasIndex("CountryName");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DataBaseEntities.Models.ViewModel.Country", b =>
                {
                    b.Property<string>("CountryName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryName");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DataBaseEntities.Models.ViewModel.Language", b =>
                {
                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LanguageName");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DataBaseEntities.Models.LanguagePerson", b =>
                {
                    b.HasOne("DataBaseEntities.Models.ViewModel.Language", "Language")
                        .WithMany("LanguagePerson")
                        .HasForeignKey("LanguageName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBaseEntities.Models.Person", "Person")
                        .WithMany("LanguagePerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataBaseEntities.Models.Person", b =>
                {
                    b.HasOne("DataBaseEntities.Models.ViewModel.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityName");

                    b.HasOne("DataBaseEntities.Models.ViewModel.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryName");

                    b.HasOne("DataBaseEntities.Models.ViewModel.Language", null)
                        .WithMany("People")
                        .HasForeignKey("LanguageName");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataBaseEntities.Models.ViewModel.City", b =>
                {
                    b.HasOne("DataBaseEntities.Models.ViewModel.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryName");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataBaseEntities.Models.Person", b =>
                {
                    b.Navigation("LanguagePerson");
                });

            modelBuilder.Entity("DataBaseEntities.Models.ViewModel.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("DataBaseEntities.Models.ViewModel.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DataBaseEntities.Models.ViewModel.Language", b =>
                {
                    b.Navigation("LanguagePerson");

                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
